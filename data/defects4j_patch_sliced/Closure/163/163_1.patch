--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
@@ -198,37 +198,50 @@ class AnalyzePrototypeProperties implements CompilerPass {
     //    given a name context. These contexts do not have scopes.
     private Stack<NameContext> symbolStack = new Stack<NameContext>();
 
-    private ProcessProperties() {
-      symbolStack.push(new NameContext(globalNode));
-    }
     @Override
     public void enterScope(NodeTraversal t) {
-      symbolStack.peek().scope = t.getScope();
+      Node n = t.getCurrentNode();
+      if (n.isFunction()) {
+        String propName = getPrototypePropertyNameFromRValue(n);
+        if (propName != null) {
+          symbolStack.push(
+              new NameContext(
+                  getNameInfoForName(propName, PROPERTY),
+                  t.getScope()));
+        } else if (isGlobalFunctionDeclaration(t, n)) {
+          Node parent = n.getParent();
+          String name = parent.isName() ?
+              parent.getString() /* VAR */ :
+              n.getFirstChild().getString() /* named function */;
+          symbolStack.push(
+              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
+        } else {
           // NOTE(nicksantos): We use the same anonymous node for all
           // functions that do not have reasonable names. I can't remember
           // at the moment why we do this. I think it's because anonymous
           // nodes can never have in-edges. They're just there as a placeholder
           // for scope information, and do not matter in the edge propagation.
+          symbolStack.push(new NameContext(anonymousNode, t.getScope()));
+        }
+      } else {
+        Preconditions.checkState(t.inGlobalScope());
+        symbolStack.push(new NameContext(globalNode, t.getScope()));
+      }
     }
 
     @Override
     public void exitScope(NodeTraversal t) {
-
+      symbolStack.pop();
     }
 
     @Override
     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
       // Process prototype assignments to non-functions.
-      if (isPrototypePropertyAssign(n)) {
-        symbolStack.push(new NameContext(getNameInfoForName(
-                n.getFirstChild().getLastChild().getString(), PROPERTY)));
-      } else if (isGlobalFunctionDeclaration(t, n)) {
-        String name = parent.isName() ?
-            parent.getString() /* VAR */ :
-            n.getFirstChild().getString() /* named function */;
-        symbolStack.push(new NameContext(getNameInfoForName(name, VAR)));
-      } else if (n.isFunction()) {
-        symbolStack.push(new NameContext(anonymousNode));
+      String propName = processNonFunctionPrototypeAssign(n, parent);
+      if (propName != null) {
+        symbolStack.push(
+            new NameContext(
+                getNameInfoForName(propName, PROPERTY), null));
       }
       return true;
     }
