--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -268,8 +269,28 @@ class ScopedAliases implements HotSwapCompilerPass {
       hasErrors = true;
     }
 
+    private void findAliases(NodeTraversal t) {
+      Scope scope = t.getScope();
+      for (Var v : scope.getVarIterable()) {
+        Node n = v.getNode();
+        int type = n.getType();
+        Node parent = n.getParent();
+        if (parent.getType() == Token.VAR) {
+          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+            String name = n.getString();
+            Var aliasVar = scope.getVar(name);
+            aliases.put(name, aliasVar);
 
+            String qualifiedName =
+                aliasVar.getInitialValue().getQualifiedName();
+            transformation.addAlias(name, qualifiedName);
+          } else {
             // TODO(robbyw): Support using locals for private variables.
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          }
+        }
+      }
+    }
 
     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {
       if (preprocessorSymbolTable != null) {
