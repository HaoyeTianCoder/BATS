--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java
@@ -106,10 +114,43 @@ final class TypeInfoFactory {
     }
   }
 
+  private static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) {
+    Class<?> rawParentType = null;
+    if (parentType instanceof Class<?>) {
+      rawParentType = (Class<?>) parentType;
+    } else if (parentType instanceof ParameterizedType) {
+      ParameterizedType parentTypeAsPT = (ParameterizedType) parentType;
+      rawParentType = (Class<?>) parentTypeAsPT.getRawType();
+    } else {
+      return null;
+    }
 
+    Type superClass = rawParentType.getGenericSuperclass();
+    if (superClass instanceof ParameterizedType
+        && ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {
       // Evaluate type on this type
+      TypeVariable<?>[] classTypeVariables =
+          ((Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters();
+      int indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate);
+
+      Type[] actualTypeArguments = null;
+      if (parentType instanceof Class<?>) {
+        actualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments();
+      } else if (parentType instanceof ParameterizedType) {
+        actualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();
+      } else {
+        return null;
+      }
 
+      return actualTypeArguments[indexOfActualTypeArgument];
+    }
 
+    Type searchedType = null;
+    if (superClass != null) {
+      searchedType = extractTypeForHierarchy(superClass, typeToEvaluate);
+    }
+    return searchedType;
+  }
 
   private static Type[] extractRealTypes(
       Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {
