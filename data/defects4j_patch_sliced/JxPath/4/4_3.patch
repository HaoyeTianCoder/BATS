--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
@@ -629,35 +631,34 @@ public class DOMNodePointer extends NodePointer {
     }
 
     public Object getValue() {
+        if (node.getNodeType() == Node.COMMENT_NODE) {
+            String text = ((Comment) node).getData();
+            return text == null ? "" : text.trim();
+        }
         return stringValue(node);
     }
 
     private String stringValue(Node node) {
         int nodeType = node.getNodeType();
         if (nodeType == Node.COMMENT_NODE) {
-            String text = ((Comment) node).getData();
-            return text == null ? "" : text.trim();
+            return "";
         }
+        boolean trim = !"preserve".equals(findEnclosingAttribute(node, "xml:space"));
         if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {
             String text = node.getNodeValue();
-            return text == null ? "" : text.trim();
+            return text == null ? "" : trim ? text.trim() : text;
         }
         if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {
             String text = ((ProcessingInstruction) node).getData();
-            return text == null ? "" : text.trim();
+            return text == null ? "" : trim ? text.trim() : text;
         }
         NodeList list = node.getChildNodes();
         StringBuffer buf = new StringBuffer(16);
         for (int i = 0; i < list.getLength(); i++) {
             Node child = list.item(i);
-            if (child.getNodeType() == Node.TEXT_NODE) {
-                buf.append(child.getNodeValue());
-            }
-            else {
             buf.append(stringValue(child));
-            }
         }
-        return buf.toString().trim();
+        return buf.toString();
     }
 
     /**
